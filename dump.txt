            #selected_game = pamWidgets.GameCarouselItem()
            #selected_game.text = ""
            #games.add_widget(selected_game)
            #highlighter = pamWidgets.GameCarouselHighlighter()
            #games.add_widget(highlighter)
            #games.children[0].x = games.children[3].x
            #games.children[0].y += games.children[3].y
            #games.children[0].background_color = includes.get_color_from_hex(selected_game.h_color)


            subTabs = self.MM.CurrentTab().children[0].children[0].children[0].children[0].children
                            # if not at the beginning of the list and not inside a tab
                            if self.MM.t_i > 0 and not self.MM.CurrentTab().collapse:
                                self.MM.CurrentTab().highlighted = False
                                self.MM.t_i -= 1
                                subTabs = self.MM.CurrentTab().children[0].children[0].children[0].children[0].children
                                if not self.MM.CurrentTab().collapse:
                                    self.MM.CurrentTab().highlighted = True
                                    
                                else:
                                    currentTab = self.MM.CurrentTab()
                                    subTabs = self.MM.CurrentTab().children[0].children[0].children[0].children[0].children
                                    #currentTab.children[len(subTabs) - 1].highlighted = True
                                    subTabs[len(subTabs) - 1].highlighted = True
                                    print(subTabs[len(subTabs)-1])
                                    

                            # if not at the beginning and tab not collapsed
                            elif self.MM.t_i > 0 and self.MM.CurrentTab().collapse:
                                if self.MM.CurrentTab().highlighted:
                                    self.MM.CurrentTab().highlighted = False
                                    self.MM.t_i -= 1
                                    subTabs = self.MM.CurrentTab().children[0].children[0].children[0].children[0].children
                                    if not self.MM.CurrentTab().collapse:
                                        self.MM.CurrentTab().highlighted = True
                                        
                                    else:
                                        currentTab = self.MM.CurrentTab()
                                        #currentTab.children[len(currentTab.children) - 1].highlighted = True
                                        subTabs[len(subTabs) - 1].highlighted = True
                                        

                                else:
                                    subTabs = self.MM.CurrentTab().children[0].children[0].children[0].children[0].children
                                    for i in range(len(subTabs)):
                                        if subTabs[i].highlighted:
                                            subTabs[i].highlighted = False;
                                            print("Current Tab: " + self.MM.CurrentTab().title)

                                            if i == 0:
                                                self.MM.CurrentTab().highlighted = True;
                                                
                                            else:
                                                subTabs[i - 1].highlighted = True;
                                            break;
                            else:
                                print("DEBUG: Potentially unaccounted-for case in the Tabs section")
                                includes.playsound(includes.sounds.getSound("end_of_list"), False)


subTabs = self.MM.CurrentTab().children[0].children[0].children[0].children[0].children
                            # if not on the last tab and the current tab is collapsed
                            if self.MM.t_i < len(self.MM.tabsList) - 1 and self.MM.CurrentTab().collapse:
                                self.MM.CurrentTab().highlighted = False
                                self.MM.t_i += 1
                                subTabs = self.MM.CurrentTab().children[0].children[0].children[0].children[0].children
                                self.MM.CurrentTab().highlighted = True


                            # if on any tab and the tab is not collapsed
                            elif not self.MM.CurrentTab().collapse:
                                if self.MM.CurrentTab().highlighted:
                                    self.MM.CurrentTab().highlighted = False                                    
                                    subTabs[0].highlighted = True
                                
                                else: # find the child that is selected 
                                    for i in range(len(subTabs)):
                                        if subTabs[i].highlighted: # once you find it
                                            

                                            if (i == (len(subTabs) - 1)) and self.MM.t_i < (len(self.MM.tabsList) - 1): # if it's the last item in a sub tab and there is a next tab
                                                self.MM.CurrentTab().children[i].highlighted = False;
                                                self.MM.t_i += 1
                                                subTabs = self.MM.CurrentTab().children[0].children[0].children[0].children[0].children
                                                self.MM.CurrentTab().highlighted = True;
                                            else:
                                                subTabs[i].highlighted = False;
                                                subTabs[i + 1].highlighted = True;

                                            break;
                            else:
                                print("DEBUG: Potentially unaccounted-for case in the Tabs section")
                                includes.playsound(includes.sounds.getSound("end_of_list"), False)